@using WebApplication30.ViewModels
@model List<Product>
@using Microsoft.AspNetCore.Identity;
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager


    @if (SignInManager.IsSignedIn(User))
    {
    <h2>Продукты</h2>
    <p class="p-cr">
        @Html.ActionLink("Создать продукт", "Create")
    </p>
    <div class="row">
        @foreach (var product in Model)
        {
            <div class="col-md-3">
                <div class="card mb-4 box-shadow" style="background-color: @product.CardBackground;">
                    <div class="card-body" style="padding:0;">
                        <input type="hidden" id="productId_@product.Id" value="@product.Id" />
                        <div class="card-body-top-height">

                        <h5 class="card-title" style="color: @product.CardText;">Название: @product.Name</h5>
                        @if (product.Discount > 0)
                        {
                            decimal discountedPrice = product.Price - (product.Price * (decimal)product.Discount / 100);
                            <h6 style="color: @product.CardText !important" class="card-subtitle mb-2 text-muted">
                                Цена: <strike>@product.Price.ToString("0.00")</strike> руб. &nbsp; @discountedPrice.ToString("0.00") руб.
                            </h6>
                            <p style="color: @product.CardText" class="p-discount card-text">Скидка: @product.Discount %</p>
                        }
                        else
                        {
                            <h6 style="color: @product.CardText !important" class="card-subtitle mb-2 text-muted">Цена: @product.Price.ToString("0.00") руб.</h6>
                        }
                        </div>
                        <img class="card-img-top img" src="@product.ImgUrl" />
                        <div class="card-body-down-height">

                        <p style="color: @product.CardText" class="p-cart">@product.Description</p>
                        <div class="btn-wrap">
                            <a href="@Url.Action("Delete", new { id = product.Id })" class="btn">Удалить</a>
                            <!-- Кнопка для открытия попапа -->
                            <button type="button" class="btn" data-bs-toggle="modal" data-bs-target="#popupModal_@product.Id" onclick="openPopup('@product.Id', '@product.Name', '@product.Price', '@product.TotalPrice')">В корзину</button>
                            <a href="@Url.Action("Details", "Product", new { id = product.Id })" class="btn">Посмотреть фото</a>
                        </div>
                        </div>

                        <!-- Попап -->
                        <div class="modal fade" id="popupModal_@product.Id" tabindex="-1" aria-labelledby="popupModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="popupModalLabel">Добавление в корзину</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                                    </div>
                                    <div class="modal-body">
                                        <h6 id="productName_@product.Id"></h6>
                                        <p>Цена: <span id="productPrice_@product.Id"></span>руб.</p>
                                        <div class="mb-3">
                                            <label for="quantity_@product.Id" class="form-label">Количество:</label>
                                            <input max="9" type="number" class="form-control" id="quantity_@product.Id" min="0" value="1" onchange="updateTotalPrice('@product.Id')" />
                                        </div>
                                        <p>Итоговая цена: <span id="totalPrice_@product.Id"></span>руб.</p>
                                    </div>

                                    <div class="modal-footer">
                                        <button type="button" class="btn" data-bs-dismiss="modal">Закрыть</button>
                                        <button type="button" class="btn" onclick="addToCart('@product.Id')">Добавить в корзину</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <script>
        // Функция для обновления итоговой цены на основе количества
        function updateTotalPrice(productId) {
            var quantity = parseInt($("#quantity_" + productId).val());
            var productPrice = parseFloat($("#productPrice_" + productId).text().replace(",", "."));
            var totalPrice = (quantity * productPrice).toFixed(2); // Округляем итоговую цену до двух знаков после запятой
            $("#totalPrice_" + productId).text(totalPrice);
        }

        // Функция для открытия попапа и заполнения данными
        function openPopup(productId, productName, productPrice) {
            // Обновляем данные в попапе
            $("#productName_" + productId).text(productName);
            $("#productPrice_" + productId).text(productPrice);
            $("#totalPrice_" + productId).text(productPrice); // Начальная итоговая цена равна цене товара

            // Сбрасываем количество в поле ввода на 1
            $("#quantity_" + productId).val(1);

            // Обновляем итоговую цену на основе начального количества (1)
            updateTotalPrice(productId);
        }

        // Функция для добавления товара в корзину
        function addToCart(productId) {
            var quantity = parseInt($("#quantity_" + productId).val());
            if (isNaN(quantity) || quantity <= 0) {
                alert("Введите корректное количество товара (больше 0).");
                return;
            }

            // Отправить запрос на сервер для добавления товара в корзину
            var url = '@Url.Action("AddToCart", "Cart")';
            var data = { id: productId, quantity: quantity };

            $.ajax({
                url: url,
                type: "POST",
                data: data,
                success: function (response) {
                    // Обработать успешный ответ от сервера (если необходимо)
                    console.log("Товар успешно добавлен в корзину!");
                    // Перезагрузить страницу, чтобы обновить корзину
                    window.location.reload();
                },
                error: function () {
                    // Обработать ошибку (если необходимо)
                    console.log("Ошибка при добавлении товара в корзину!");
                }
            });

            // Закрыть попап (если есть)
            var modal = $("#popupModal_" + productId);
            if (modal) {
                modal.modal("hide");
            }
        }
        function calcImgHeight() {
            const imgList = document.querySelectorAll(".img");
            const colmd4List = document.querySelectorAll(".col-md-3");
            const cardBodyTopHtml = document.querySelectorAll(".card-body-top-height");
            const cardBodyDownHtml = document.querySelectorAll(".card-body-down-height");
            
            function updateImgHeight() {
                imgList.forEach((img, index) => {
                    const colmd3Height = colmd4List[index].offsetHeight;
                    const TopHeight = cardBodyTopHtml[index].offsetHeight;
                    const DownHeight = cardBodyDownHtml[index].offsetHeight;

                    img.style.height = colmd3Height - TopHeight - DownHeight - (55/2) + "px";
                });
            }

            // Initial update
            updateImgHeight();

            // Add event listener for window resize
            window.addEventListener('resize', updateImgHeight);
        }

        // Call the function to set up the initial state and event listener
        calcImgHeight();

        function calcButtonsWidth() {
            const btns = document.querySelectorAll(".col-md-4 .btn");

            function updateButtonsWidth() {
                btns.forEach((button, index) => {
                        button.style.width = 100 + "%"
                        button.style.height = 39 + "px"
                });
            }

            // Initial update
            updateButtonsWidth();

            // Add event listener for window resize
            window.addEventListener('resize', updateButtonsWidth);
        }

        // Call the function to set up the initial state and event listener
        calcButtonsWidth();
        
        //Animation
        const cards = document.querySelectorAll('.col-md-3');
        cards.forEach(item => item.setAttribute('data-aos', 'fade-up'));
        
    </script>


   
    }
    else
    {
        <div class="container">
        <p class="shake">Вы не авторизированы! <a asp-controller="account" asp-action="login">Авторизироваться</a></p>
        </div>
    }


